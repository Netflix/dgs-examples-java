{"version":3,"sources":["index.tsx"],"names":["webSocketLink","GraphQLWsLink","createClient","url","httpLink","createHttpLink","uri","client","ApolloClient","link","split","operation","operationName","cache","InMemoryCache","headers","resolvers","App","useQuery","gql","loading","error","data","shows","map","show","title","SubscriptionPanel","useSubscription","reviewAdded","username","ReactDOM","render","document","getElementById"],"mappings":"wmBAiCA,IAAMA,EAAgB,IAAIC,IAAcC,uBAAa,CACjDC,IAAK,uCAIHC,EAAWC,YAAe,CAACC,IAAI,kCAC/BC,EAA8C,IAAIC,IAAa,CACjEC,KAAMC,aAAM,SAACC,GACT,MAAmC,gBAA5BA,EAAUC,gBAClBZ,EAAeI,GAClBS,MAAO,IAAIC,IACXC,QAAS,GACTC,UAAW,KAGTC,EAAgB,WAAO,IAAD,EACOC,YAASC,YAAA,MAAjCC,EADiB,EACjBA,QAASC,EADQ,EACRA,MAAOC,EADC,EACDA,KAOvB,OAAOF,EACH,2CACEC,EAAQ,6BAAMA,GACV,6BACE,sCACA,+BACI,4BACI,sCAEHC,EAAKC,MAAMC,KAAI,SAACC,GACb,OAAO,4BACH,4BAAKA,EAAKC,YAKtB,6CACA,kBAACC,EAAD,QAQVA,EAA+B,WAAO,IAAD,EACRC,YAAgBT,YAAA,KAM5C,IANIG,EADgC,EAChCA,KADgC,EAC1BF,QAD0B,EACjBC,MAStB,OAAOC,EAAK,6BAAMA,EAAKO,YAAYC,SAAvB,KAAoCR,EAAKO,YAAYC,UAAgB,+BAGrFC,IAASC,OACL,kBAAC,IAAD,CAAgBzB,OAAQA,GACpB,kBAACU,EAAD,OAEJgB,SAASC,eAAe,W","file":"static/js/main.05accb10.chunk.js","sourcesContent":["/*\n * Copyright 2020 Netflix, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n    ApolloClient,\n    ApolloProvider,\n    createHttpLink,\n    gql,\n    InMemoryCache,\n    NormalizedCacheObject,\n    split,\n    useQuery,\n    useSubscription\n} from '@apollo/client';\n\nimport { GraphQLWsLink } from \"@apollo/client/link/subscriptions\";\nimport { createClient } from 'graphql-ws';\n\nconst webSocketLink = new GraphQLWsLink(createClient({\n    url: 'ws://localhost:8080/subscriptions',\n}));\n\n\nconst httpLink = createHttpLink({uri:'http://localhost:8080/graphql' })\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n    link: split((operation) => {\n        return operation.operationName === \"ReviewAdded\"\n    }, webSocketLink, httpLink),\n    cache: new InMemoryCache(),\n    headers: {},\n    resolvers: {},\n});\n\nconst App: React.FC = () => {\n    const {loading, error, data} = useQuery(gql`\n        {\n            shows {\n                title\n            }\n        }`);\n\n    return loading ?\n        <div>Loading...</div>\n        : error ? <div>{error}</div>\n            : <div>\n                <h1>Movies</h1>\n                <table>\n                    <tr>\n                        <th>Title</th>\n                    </tr>\n                    {data.shows.map((show: Show) => {\n                        return <tr>\n                            <td>{show.title}</td>\n                        </tr>\n                    })}\n                </table>\n\n                <h1>Subscriptions</h1>\n                <SubscriptionPanel/>\n            </div>\n}\n\ntype Show = {\n    title: String\n}\n\nconst SubscriptionPanel : React.FC = () => {\n    const {data, loading, error} = useSubscription(gql`\n        subscription ReviewAdded {\n            reviewAdded(showId: 1) {\n                username\n            }\n        }\n    `, {});\n\n\n    return data?<div>{data.reviewAdded.username}: { data.reviewAdded.username}</div>:<div/>\n}\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App/>\n    </ApolloProvider>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}